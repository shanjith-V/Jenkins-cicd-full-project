pipeline {
    agent {
        docker {
            image 'maven:3.8.6-openjdk-17'   // Use Maven + JDK for Spring Boot
            args '-u root:root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        // Docker Hub
        REGISTRY = "shanjithv"
        IMAGE_NAME = "spring-boot-app"
        DOCKER_IMAGE = "${REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER}"
        DOCKER_CREDENTIALS = credentials('docker-cred')

        // SonarQube
        SONAR_HOST_URL = 'http://sonarqube:9000'
        SONAR_TOKEN = credentials('sonarqube')

        // GitHub Repo for Manifests
        GIT_REPO_NAME = 'ultimate-cicd-pipeline'
        GIT_USER_NAME = 'shanjith-V'
        GIT_USER_EMAIL = 'sanjumac0810@gmail.com'
        GITHUB_TOKEN = credentials('github')
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main',
                    url: "https://github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git"
            }
        }

        stage('Build Spring Boot App') {
            steps {
                sh 'cd spring-boot-app && mvn clean package -DskipTests'
            }
        }

        stage('Static Code Analysis - SonarQube') {
            steps {
                dir('spring-boot-app') {
                    sh """
                        mvn sonar:sonar \
                        -Dsonar.projectKey=${IMAGE_NAME} \
                        -Dsonar.host.url=${SONAR_HOST_URL} \
                        -Dsonar.login=${SONAR_TOKEN}
                    """
                }
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                script {
                    sh "cd spring-boot-app && docker build -t ${DOCKER_IMAGE} ."
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Update Deployment Manifests in GitHub') {
            steps {
                script {
                    sh """
                        git config --global user.email "${GIT_USER_EMAIL}"
                        git config --global user.name "${GIT_USER_NAME}"
                        
                        sed -i "s|replaceImageTag|${BUILD_NUMBER}|g" spring-boot-app-manifests/deployment.yml
                        
                        git add spring-boot-app-manifests/deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
                    """
                }
            }
        }

        stage('Deploy with ArgoCD') {
            steps {
                script {
                    sh """
                        argocd login localhost:8082 --username admin --password ${aRNMzKFxbYvGnZGT} --insecure
                        argocd app sync spring-boot-app
                    """
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up unused Docker images..."
            sh "docker rmi ${DOCKER_IMAGE} || true"
        }
    }
}
